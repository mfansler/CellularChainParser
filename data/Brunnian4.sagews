︠d827ba4e-0c44-44ae-a280-b3661222cfa3as︠
%auto

def extract_generators(hom):
    return {dim: [chain.vector(dim) for chain in chains] if chains else [0] for dim, chains in hom.items()}
︡e72ba3f1-1a8c-43e9-afe4-3039dc09fdf8︡{"done":true}︡
︠b43fae19-39f0-4e5e-8db0-46ff802abad2as︠
%auto

def minimize_generator(gen, diff, steps=1,pruning=False,prune_rad=4):
    gen.set_immutable()
    gens = set([gen])
    for _ in range(steps):
        old_gens = gens.copy()
        if pruning:
            #print "num before pruning = {}".format(len(gens))
            sums = [(c, c.hamming_weight()) for c in gens]
            min_size = min([w for (c, w) in sums])
            gens = set([c for (c, w) in sums if w <= min_size + prune_rad])
            #print "num after pruning = {}".format(len(gens))
        expanded = [[c + g for c in diff.columns() if not g.pairwise_product(c).is_zero()] for g in gens]
        for gs in expanded:
            for g in gs:
                g.set_immutable()
                gens.add(g)
        if old_gens == gens:
            break
    return min(sorted(gens, reverse=true), key=lambda c: c.hamming_weight())
︡5c8d6f43-e9f3-489f-8025-cf0d881b9dab︡{"done":true}︡
︠505e623c-f3e4-4d7b-8168-0fb219293257as︠
%auto

def minimal_generators(gens, diffs, steps=3, pruning=False, prune_rad=4):
    return {
        key: gs if gs == [0] else
        [minimize_generator(g, diffs[key+1], steps, pruning = pruning, prune_rad = prune_rad) for g in gs]
        for key, gs in gens.items()
    }
︡a8e7f901-6ee5-4016-b534-48461e352123︡{"done":true}︡
︠90309e6a-b44d-4af6-8364-5a136662c895s︠
BR4_d1 = matrix(Integers(2), 23, 68, {(13, 55): 1, (8, 44): 1, (21, 28): 1, (4, 36): 1, (20, 65): 1, (10, 46): 1, (1, 6): 1, (17, 25): 1, (7, 42): 1, (3, 7): 1, (10, 18): 1, (16, 22): 1, (12, 17): 1, (0, 4): 1, (13, 20): 1, (19, 65): 1, (8, 15): 1, (22, 3): 1, (4, 10): 1, (5, 11): 1, (19, 24): 1, (2, 32): 1, (0, 30): 1, (1, 31): 1, (0, 1): 1, (6, 41): 1, (22, 66): 1, (18, 25): 1, (12, 50): 1, (14, 21): 1, (18, 62): 1, (5, 40): 1, (9, 45): 1, (8, 35): 1, (6, 42): 1, (18, 26): 1, (1, 33): 1, (13, 54): 1, (8, 45): 1, (7, 15): 1, (14, 5): 1, (4, 37): 1, (14, 56): 1, (13, 16): 1, (10, 47): 1, (1, 5): 1, (11, 51): 1, (5, 4): 1, (12, 52): 1, (6, 13): 1, (10, 19): 1, (16, 23): 1, (19, 64): 1, (10, 48): 1, (22, 0): 1, (2, 7): 1, (16, 48): 1, (4, 6): 1, (17, 61): 1, (19, 27): 1, (2, 33): 1, (6, 43): 1, (20, 28): 1, (0, 31): 1, (13, 9): 1, (1, 30): 1, (0, 2): 1, (14, 54): 1, (22, 67): 1, (19, 63): 1, (2, 8): 1, (21, 61): 1, (12, 51): 1, (2, 34): 1, (18, 63): 1, (11, 19): 1, (9, 44): 1, (15, 57): 1, (22, 27): 1, (19, 20): 1, (21, 67): 1, (16, 58): 1, (1, 32): 1, (8, 16): 1, (13, 53): 1, (3, 37): 1, (7, 14): 1, (4, 38): 1, (9, 47): 1, (14, 57): 1, (5, 39): 1, (3, 9): 1, (11, 50): 1, (12, 53): 1, (17, 59): 1, (21, 29): 1, (20, 64): 1, (17, 21): 1, (17, 26): 1, (7, 43): 1, (22, 1): 1, (9, 12): 1, (16, 49): 1, (10, 11): 1, (17, 60): 1, (15, 22): 1, (20, 29): 1, (0, 3): 1, (16, 24): 1, (14, 55): 1, (19, 62): 1, (8, 14): 1, (22, 2): 1, (10, 49): 1, (21, 60): 1, (2, 35): 1, (9, 17): 1, (12, 10): 1, (11, 18): 1, (20, 13): 1, (0, 0): 1, (15, 56): 1, (6, 40): 1, (21, 66): 1, (16, 59): 1, (17, 58): 1, (6, 12): 1, (13, 52): 1, (3, 36): 1, (15, 23): 1, (5, 41): 1, (4, 39): 1, (9, 46): 1, (8, 34): 1, (5, 38): 1, (3, 8): 1}, sparse=True)
BR4_d2 = matrix(Integers(2), 68, 50, {(36, 6): 1, (31, 19): 1, (37, 7): 1, (22, 19): 1, (38, 20): 1, (44, 4): 1, (17, 25): 1, (7, 42): 1, (56, 12): 1, (42, 34): 1, (13, 32): 1, (44, 34): 1, (50, 22): 1, (52, 36): 1, (36, 8): 1, (34, 8): 1, (31, 5): 1, (5, 18): 1, (11, 22): 1, (8, 41): 1, (41, 29): 1, (46, 26): 1, (11, 27): 1, (36, 40): 1, (0, 4): 1, (54, 42): 1, (51, 11): 1, (17, 36): 1, (12, 34): 1, (28, 31): 1, (52, 12): 1, (50, 12): 1, (23, 10): 1, (65, 17): 1, (20, 32): 1, (19, 24): 1, (42, 32): 1, (10, 23): 1, (58, 48): 1, (31, 21): 1, (9, 39): 1, (49, 5): 1, (6, 41): 1, (64, 32): 1, (28, 17): 1, (14, 34): 1, (30, 18): 1, (22, 12): 1, (3, 1): 1, (43, 35): 1, (15, 33): 1, (35, 9): 1, (58, 4): 1, (29, 14): 1, (6, 40): 1, (7, 8): 1, (14, 8): 1, (33, 41): 1, (43, 7): 1, (25, 16): 1, (41, 27): 1, (38, 8): 1, (12, 27): 1, (2, 18): 1, (45, 5): 1, (46, 24): 1, (57, 13): 1, (4, 28): 1, (3, 28): 1, (25, 47): 1, (26, 14): 1, (30, 4): 1, (34, 4): 1, (58, 46): 1, (56, 18): 1, (37, 9): 1, (60, 4): 1, (24, 18): 1, (38, 6): 1, (42, 6): 1, (39, 7): 1, (19, 11): 1, (1, 5): 1, (17, 24): 1, (16, 32): 1, (13, 29): 1, (20, 44): 1, (2, 2): 1, (8, 6): 1, (47, 5): 1, (53, 13): 1, (65, 33): 1, (57, 19): 1, (66, 30): 1, (55, 11): 1, (65, 15): 1, (4, 21): 1, (11, 26): 1, (51, 25): 1, (15, 7): 1, (38, 22): 1, (21, 49): 1, (27, 31): 1, (33, 43): 1, (56, 10): 1, (12, 35): 1, (63, 45): 1, (57, 11): 1, (29, 29): 1, (60, 16): 1, (18, 22): 1, (50, 24): 1, (54, 44): 1, (45, 35): 1, (20, 33): 1, (45, 37): 1, (40, 26): 1, (6, 20): 1, (9, 43): 1, (60, 14): 1, (3, 29): 1, (61, 15): 1, (9, 38): 1, (0, 2): 1, (4, 20): 1, (48, 12): 1, (66, 28): 1, (1, 3): 1, (22, 13): 1, (62, 46): 1, (3, 0): 1, (15, 32): 1, (36, 38): 1, (40, 8): 1, (63, 47): 1, (57, 49): 1, (14, 9): 1, (55, 13): 1, (61, 5): 1, (67, 5): 1, (47, 27): 1, (29, 15): 1, (2, 19): 1, (18, 12): 1, (16, 36): 1, (46, 4): 1, (10, 38): 1, (55, 43): 1, (24, 47): 1, (39, 23): 1, (44, 36): 1, (43, 33): 1, (25, 46): 1, (21, 48): 1, (35, 7): 1, (26, 45): 1, (7, 9): 1, (21, 45): 1, (53, 37): 1, (42, 8): 1, (24, 19): 1, (5, 42): 1, (62, 44): 1, (67, 29): 1, (27, 19): 1, (16, 33): 1, (13, 28): 1, (2, 3): 1, (8, 7): 1, (32, 4): 1, (14, 35): 1, (5, 43): 1, (4, 29): 1, (61, 17): 1, (34, 6): 1, (23, 48): 1, (23, 49): 1, (62, 14): 1, (24, 46): 1, (64, 14): 1, (47, 25): 1, (63, 15): 1, (1, 1): 1, (9, 42): 1, (67, 31): 1, (15, 6): 1, (22, 18): 1, (62, 16): 1, (27, 30): 1, (51, 13): 1, (49, 13): 1, (55, 45): 1, (50, 10): 1, (13, 33): 1, (29, 28): 1, (37, 41): 1, (54, 12): 1, (65, 31): 1, (41, 9): 1, (6, 21): 1, (5, 19): 1, (11, 23): 1, (8, 40): 1, (64, 30): 1, (51, 23): 1, (32, 40): 1, (26, 15): 1, (17, 37): 1, (39, 21): 1, (28, 30): 1, (23, 11): 1, (30, 20): 1, (37, 39): 1, (26, 44): 1, (19, 25): 1, (40, 28): 1, (19, 10): 1, (10, 22): 1, (66, 4): 1, (52, 38): 1, (18, 23): 1, (18, 13): 1, (0, 0): 1, (16, 37): 1, (48, 10): 1, (28, 16): 1, (10, 39): 1, (59, 47): 1, (49, 11): 1, (33, 5): 1, (64, 16): 1, (20, 45): 1, (59, 49): 1, (59, 5): 1, (40, 6): 1, (21, 44): 1, (54, 10): 1, (41, 7): 1, (56, 48): 1, (53, 39): 1, (25, 17): 1, (48, 4): 1, (12, 26): 1, (27, 18): 1, (43, 9): 1, (63, 17): 1, (52, 10): 1, (32, 42): 1, (53, 11): 1, (39, 9): 1, (7, 43): 1, (35, 5): 1}, sparse=True)
BR4_d3 = matrix(Integers(2), 50, 5, {(32, 1): 1, (22, 3): 1, (23, 4): 1, (3, 0): 1, (11, 2): 1, (21, 2): 1, (48, 1): 1, (47, 4): 1, (28, 1): 1, (9, 4): 1, (46, 3): 1, (37, 2): 1, (7, 2): 1, (1, 2): 1, (30, 3): 1, (44, 1): 1, (3, 4): 1, (35, 4): 1, (16, 3): 1, (26, 3): 1, (43, 4): 1, (39, 4): 1, (41, 2): 1, (14, 1): 1, (24, 1): 1, (4, 1): 1, (13, 4): 1, (12, 3): 1, (33, 2): 1, (5, 4): 1, (0, 0): 1, (40, 1): 1, (19, 4): 1, (20, 1): 1, (49, 2): 1, (29, 2): 1, (10, 1): 1, (27, 4): 1, (18, 3): 1, (1, 0): 1, (36, 1): 1, (17, 4): 1, (0, 1): 1, (38, 3): 1, (8, 3): 1, (45, 2): 1, (15, 2): 1, (42, 3): 1, (6, 1): 1, (2, 0): 1, (34, 3): 1, (4, 3): 1, (25, 2): 1, (2, 3): 1, (5, 2): 1, (31, 4): 1}, sparse=True)

︡c85fb683-8c75-473f-8002-7704255e1996︡{"done":true}︡
︠0c1abad3-9b96-4fdd-a24c-b359b5aa31f6s︠
BR4_CC = ChainComplex({ 1: BR4_d1, 2: BR4_d2, 3: BR4_d3 }, degree=-1)
︡73531e76-e840-428a-8e25-540bdc7b2920︡{"done":true}︡
︠f39de8fc-7ec9-4e55-af59-dd088fd8900cs︠
BR4_Hom = BR4_CC.homology(generators=true);
BR4_Hom
︡90658180-ce42-40bf-ade9-70d724c0015e︡{"stdout":"{0: [(Vector space of dimension 1 over Ring of integers modulo 2, Chain(0:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)))], 1: [(Vector space of dimension 1 over Ring of integers modulo 2, Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))), (Vector space of dimension 1 over Ring of integers modulo 2, Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1))), (Vector space of dimension 1 over Ring of integers modulo 2, Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))), (Vector space of dimension 1 over Ring of integers modulo 2, Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1)))], 2: [(Vector space of dimension 1 over Ring of integers modulo 2, Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))), (Vector space of dimension 1 over Ring of integers modulo 2, Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))), (Vector space of dimension 1 over Ring of integers modulo 2, Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)))], 3: []}\n"}︡{"done":true}︡
︠0e9d8a4b-cd4c-4b60-ae8c-bcd1db2df959s︠
BR4H = {key: [v[1] for v in val] if val else [BR4_CC(0)] for key, val in BR4_Hom.items()}; BR4H
︡05e7aa91-07b4-4dac-b39f-84c30ede6443︡{"stdout":"{0: [Chain(0:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1))], 1: [Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1)), Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), Chain(1:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1))], 2: [Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), Chain(2:(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))], 3: [Trivial chain]}\n"}︡{"done":true}︡
︠5c0ba5d9-820e-40c3-b034-d6fc845d799ds︠
BR4_Chains = {  0: ['v_-2', 'v_-1', 'v_0', 'v_1.1', 'v_1.2', 'v_2.1', 'v_2.2', 'v_3', 'v_4.1', 'v_4.2', 'v_5', 'v_6.1', 'v_6.2', 'v_7.1', 'v_7.2', 'v_8', 'v_9', 'v_10', 'v_11', 'v_12', 'v_13', 'v_14', 'v_15'],  1: ['d_1', 'd_2', 'd_3', 'd_4', 'm_-2^+', 'm_-1^-', 'm_-1^+', 'm_0^-', 'm_0^+', 'm_1.1^-', 'm_1.2^-', 'm_2.1^-', 'm_2.2^-', 'm_2.2^+', 'm_3^-', 'm_3^+', 'm_4.1^+', 'm_4.2^+', 'm_5^-', 'm_5^+', 'm_7.1^+', 'm_7.2^+', 'm_8^-', 'm_8^+', 'm_9^-', 'm_10^-', 'm_10^+', 'm_12^-', 'm_13^-', 'm_13^+', 'c_-2^-', 'c_-2^+', 'c_-1^-', 'c_-1^+', 'c_0^-', 'c_0^+', 'c_1.1^-', 'c_1.1^+', 'c_1.2^-', 'c_1.2^+', 'c_2.1^-', 'c_2.1^+', 'c_2.2^-', 'c_2.2^+', 'c_4.1^-', 'c_4.1^+', 'c_4.2^-', 'c_4.2^+', 'c_5^-', 'c_5^+', 'c_6.1^-', 'c_6.1^+', 'c_6.2^-', 'c_6.2^+', 'c_7.1^-', 'c_7.1^+', 'c_7.2^-', 'c_7.2^+', 'c_9^-', 'c_9^+', 'c_10^-', 'c_10^+', 'c_11^-', 'c_11^+', 'c_12^-', 'c_12^+', 'c_14^-', 'c_14^+'],  2: ['a_1', 'a_2', 'a_3', 'a_4', 'e_1', 'e_2', 't_0^-+', 't_0^++', 't_0^--', 't_0^+-', 't_5^-+', 't_5^++', 't_5^--', 't_5^+-', 't_10^-+', 't_10^++', 't_10^--', 't_10^+-', 's_1', 's_2', 's_3', 's_4', 's_5', 's_6', 's_7', 's_8', 's_9', 's_10', 's_11', 's_12', 's_13', 's_14', 's_15', 's_16', 's_17', 's_18', 's_19', 's_20', 's_21', 's_22', 's_23', 's_24', 's_25', 's_26', 's_27', 's_28', 's_29', 's_30', 's_31', 's_32'],  3: ['D', 'q_1', 'q_2', 'q_3', 'q_4']}
︡4a6bbf45-64ef-4ee1-8c21-9fc957fcbd31︡{"done":true}︡
︠bef6bd44-dd24-4299-9a18-438b4cf4464ds︠
BR4H[2][0].vector(2).nonzero_positions()
︡a70202ae-a81b-4733-90dd-c104ec6ab982︡{"stdout":"[10, 11, 12, 13]\n"}︡{"done":true}︡
︠5a3622ac-3365-4d20-b025-1ce9a8fa9584s︠
for dim, chains in BR4H.items():
    print dim
    
    for chain in chains:
        nzs = chain.vector(dim).nonzero_positions()
        print " + ".join([BR4_Chains[dim][nz] for nz in nzs])
︡8b76b109-e3f9-450c-986a-1c8a19ddc261︡{"stdout":"0\nv_15\n1\nm_2.2^- + m_3^+ + c_2.2^+ + c_4.1^+\nm_12^- + m_13^+ + c_12^+ + c_14^+\nm_1.1^- + m_3^+ + m_8^+ + c_1.1^+ + c_1.2^+ + c_2.1^+ + c_2.2^+ + c_4.1^+ + c_4.2^+ + c_5^+ + c_7.1^+ + c_7.2^+\nc_14^- + c_14^+\n2\nt_5^-+ + t_5^++ + t_5^-- + t_5^+-\nt_10^-+ + t_10^++ + t_10^-- + t_10^+-\ns_1 + s_2 + s_3 + s_4 + s_5 + s_6 + s_7 + s_8 + s_9 + s_10 + s_11 + s_12 + s_13 + s_14 + s_15 + s_16 + s_17 + s_18 + s_19 + s_20 + s_21 + s_22 + s_23 + s_24 + s_25 + s_26 + s_27 + s_28 + s_29 + s_30 + s_31 + s_32\n3\n\n"}︡{"done":true}︡
︠c092d3e5-d489-4df0-ad13-f453bf211154s︠
extract_generators(BR4H)
︡73c86389-a8f5-4449-8ee3-c8a0b73fdb40︡{"stdout":"{0: [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)], 1: [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1), (0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1)], 2: [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)], 3: [(0, 0, 0, 0, 0)]}\n"}︡{"done":true}︡
︠0a8bf978-087b-40ac-975b-62b224f732e3s︠
BR4_gens = minimal_generators(extract_generators(BR4H), BR4_CC.differential(), 20, pruning=True)
︡61fde061-1400-41a2-85ab-fce6c4110f96︡{"done":true}︡
︠59952c24-2ae1-4c4e-8992-64a1c6765f44s︠
BR4_gens
︡b5e2489a-aa4c-4260-9c37-92afbeaaa816︡{"stdout":"{0: [(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)], 1: [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)], 2: [(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)], 3: [(0, 0, 0, 0, 0)]}\n"}︡{"done":true}︡
︠efcf9cf8-1b10-4a47-bb34-755e6107b5f9s︠
for dim, gens in BR4_gens.items():
    print dim
    for gen in gens:
        nzs = gen.nonzero_positions()
        print " + ".join([BR4_Chains[dim][nz] for nz in nzs])
︡519235d8-f0ff-4acd-84d5-997b7833299b︡{"stdout":"0\nv_-2\n1\nm_3^- + m_3^+\nm_10^- + m_10^+\nm_0^- + m_0^+ + m_5^- + m_5^+\nc_-2^- + c_-2^+\n2\nt_5^-+ + t_5^++ + t_5^-- + t_5^+-\nt_10^-+ + t_10^++ + t_10^-- + t_10^+-\nt_0^-+ + t_0^++ + t_0^-- + t_0^+- + t_5^-+ + t_5^++ + t_5^-- + t_5^+- + t_10^-+ + t_10^++ + t_10^-- + t_10^+-\n3\n\n"}︡{"done":true}︡
︠3f3a9c1e-868e-4616-89e3-32ce4141be48︠









